#!/usr/bin/env groovy

node{

    checkout scm

    try{

        stage('Test'){
            sh './gradlew test jacocoMerge'
        }

        stage('SonarQube analysis') {
            withSonarQubeEnv('sonarqube-byznass') {
                withCredentials([
                        string(credentialsId: 'sonarqube-byznass_token', variable: 'SONAR_LOGIN'),
                        string(credentialsId: 'github-token-sonarqube', variable: 'GITHUB_TOKEN')
                ]) {

                    // It's important to add --info because of SONARJNKNS-281
                    sh '''#!/bin/bash
						./gradlew --info sonarqube \
						-Dsonar.projectKey=TiolkTrack \
						-Dsonar.projectName=TiolkTrack \
						-Dsonar.login=$SONAR_LOGIN
					'''
                }
            }
        }

        stage('Docker image building'){
            withDockerRegistry([ credentialsId: "byznass-dockerhub", url: "" ]) {
                sh '''#!/bin/bash
                    docker build -t byznass/tiolktrack-client:$(git rev-parse HEAD) .
                    docker tag byznass/tiolktrack-client:$(git rev-parse HEAD) byznass/tiolktrack-client:latest
                    docker push byznass/tiolktrack-client:$(git rev-parse HEAD)
                    docker push byznass/tiolktrack-client:latest
                '''
            }
        }

        stage('k8s deployment'){
            if (CHANGE_TARGET == 'master') {
                withCredentials([file(credentialsId: 'jenkins-to-k8s', variable: 'GC_KEY')]) {
                    sh '''#!/bin/bash
                    gcloud auth activate-service-account --key-file=${GC_KEY}
                    gcloud config set project tiolktrack-1548605545784
                    gcloud config set compute/zone europe-north1-c
                    gcloud container clusters get-credentials byznass-cluster
                    kubectl apply -R -f k8s
                    kubectl set image deployments/client-deployment client=byznass/tiolktrack-client:$(git rev-parse HEAD)
                '''
                }
            } else {
                echo 'Skipped deployment because the branch is not master'
            }
        }

        stage('Merge PR'){
            withCredentials([usernamePassword(credentialsId: 'byznass-dev-github-repo', usernameVariable: 'username', passwordVariable: 'token')]){
                sh ''' #!/bin/bash
                    RESPONSE=$(curl -X PUT -u $username:$token https://api.github.com/repos/byznass/TiolkTrack/pulls/$CHANGE_ID/merge --write-out "%{http_code}" --silent --output /dev/null)
                    
                    if [ "$RESPONSE" -ne "200" ] 
                    then
						echo "Failed to merge pull request"
						exit 1
					fi
                '''
            }
        }
    } finally{
        junit '**/build/test-results/**/*.xml'
        jacoco execPattern: '**/coverageForAllTests.exec'
    }
}