/**
 * Contains tasks that run database integration tests.
 */

def dbIntegrationTestSourceDir = "$projectDir/src/dbIntegrationTest/java"
def dbIntegrationTestResourceDir = "$projectDir/src/dbIntegrationTest/resources"

sourceSets {
	dbIntegrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file(dbIntegrationTestSourceDir)
		}

		resources {
			srcDirs dbIntegrationTestResourceDir
		}
	}
}

configurations {
	dbIntegrationTestCompile.extendsFrom testCompile
	dbIntegrationTestRuntime.extendsFrom testRuntime
}

/**
 * Runs all database integration tests.
 */
task dbIntegrationTest(type: Test) {

	group = LifecycleBasePlugin.VERIFICATION_GROUP
	description = "Runs all database integration tests"

	dependsOn 'copyDbIntegrationTestResources', 'startPostgresContainer'
	finalizedBy 'stopPostgresContainer'

	testClassesDirs = sourceSets.dbIntegrationTest.output.classesDirs
	classpath = sourceSets.dbIntegrationTest.runtimeClasspath

	outputs.upToDateWhen { false }

	mustRunAfter test
}

/**
 * Prepares the machine for running database integration tests from Intellij
 */
task dbIntegrationTestInteractive(type: Exec) {

	commandLine 'docker', 'run', '--rm', '--name', 'dbIntegrationTestPostgresContainer', '-e', 'POSTGRESS_PASSWORD=dbIntegrationTest', '-e', 'POSTGRES_USER=tiolktrack', '-p', '5432:5432', 'postgres'
	dependsOn 'copyDbIntegrationTestResources'
}

task startPostgresContainer(type: Exec) {

	if (project.hasProperty('db.integration.test.network')) {
		println('Adding a network to newly created docker container')
		commandLine 'docker', 'run', '--rm', '--name', 'dbIntegrationTestPostgresContainer', '-e', 'POSTGRESS_PASSWORD=dbIntegrationTest', '-e', 'POSTGRES_USER=tiolktrack', '-d', '-p', '5432:5432', '--network', project.getProperties().get('db.integration.test.network'), 'postgres'
	} else {
		println('Creating postgres container without a custom network')
		commandLine 'docker', 'run', '--rm', '--name', 'dbIntegrationTestPostgresContainer', '-e', 'POSTGRESS_PASSWORD=dbIntegrationTest', '-e', 'POSTGRES_USER=tiolktrack', '-d', '-p', '5432:5432', 'postgres'
	}
}

task stopPostgresContainer(type: Exec) {

	commandLine 'bash', '-c', 'if [[ $(docker container ls -f "name=dbIntegrationTestPostgresContainer" -q | grep . -q; echo $?) -eq 0 ]] ; then docker stop dbIntegrationTestPostgresContainer ; fi'
}

task copyDbIntegrationTestResources(type: Copy) {

	from("$projectDir/db") {
		include 'liquibase/'
	}
	into sourceSets.dbIntegrationTest.output.resourcesDir
}

idea {
	module {
		testSourceDirs += file(dbIntegrationTestSourceDir)
		testResourceDirs += sourceSets.dbIntegrationTest.output.resourcesDir
	}
}

check.dependsOn dbIntegrationTest
