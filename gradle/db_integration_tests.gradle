/**
 * Contains tasks that run database integration tests.
 */

sourceSets {
	dbIntegrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir(file("$projectDir/src/dbIntegrationTest/java"))
		}

		resources {
			srcDirs += "$projectDir/src/dbIntegrationTest/resources"
		}
	}
}

configurations {
	dbIntegrationTestCompile.extendsFrom testCompile
	dbIntegrationTestRuntime.extendsFrom testRuntime
}

task copyDbIntegrationTestResources(type: Copy) {

	from("$projectDir/db/liquibase") {
		include '*.xml'
	}
	into sourceSets.dbIntegrationTest.output.resourcesDir
}

String dbContainerName

task deleteDbContainer(type: Exec) {

	doFirst {
		println('Deleting postgres container with name = ' + dbContainerName)
		commandLine 'bash', '-c', 'if [[ $(docker container ls -f "name=' + dbContainerName + '" -q | grep . -q; echo $?) -eq 0 ]] ; then docker stop ' + dbContainerName + ' ; fi'
	}
}

task dbIntegrationTest(type: Test) {

	group = LifecycleBasePlugin.VERIFICATION_GROUP
	description = "Runs all database integration tests"

	doFirst {
		dbContainerName = "dbIntegrationTest_" + UUID.randomUUID().toString()
		println('Creating postgres container with name = ' + dbContainerName)

		if (project.hasProperty('db.integration.test.network')) {
			println('Adding a network to newly created postgres container')
			environment "DB_INTEGRATION_TEST_HOST", dbContainerName
			exec {
				commandLine 'docker', 'run', '--rm', '--name', dbContainerName, '-e', 'POSTGRESS_PASSWORD=dbIntegrationTest', '-e', 'POSTGRES_USER=tiolktrack', '-d', '--network', project.getProperties().get('db.integration.test.network'), 'postgres'
			}
		} else {
			println('Container will be created without a custom network')
			int port = new Random().nextInt(4000) + 13000
			environment "DB_INTEGRATION_TEST_HOST", "localhost:" + port
			exec {
				commandLine 'docker', 'run', '--rm', '--name', dbContainerName, '-e', 'POSTGRESS_PASSWORD=dbIntegrationTest', '-e', 'POSTGRES_USER=tiolktrack', '-d', '-p', port + ':5432', 'postgres'
			}
		}
	}

	testClassesDirs = sourceSets.dbIntegrationTest.output.classesDirs
	classpath = sourceSets.dbIntegrationTest.runtimeClasspath

	finalizedBy tasks.deleteDbContainer
	dependsOn copyDbIntegrationTestResources
	mustRunAfter test
}

task dbIntegrationTestIntellij(type: Exec) {

	group = LifecycleBasePlugin.VERIFICATION_GROUP
	description = "Allows running database integration tests in Intellij"

	commandLine 'docker', 'run', '--rm', '--name', 'dbIntegrationTestPostgresContainer', '-e', 'POSTGRESS_PASSWORD=dbIntegrationTest', '-e', 'POSTGRES_USER=tiolktrack', '-p', '5432:5432', 'postgres'

	dependsOn += copyDbIntegrationTestResources
}

idea {
	module {
		testSourceDirs += sourceSets.dbIntegrationTest.java.srcDirs
		testResourceDirs += sourceSets.dbIntegrationTest.resources.srcDirs
		testResourceDirs += sourceSets.dbIntegrationTest.output.resourcesDir
	}
}

check.dependsOn dbIntegrationTest
