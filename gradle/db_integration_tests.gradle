/**
 * Contains tasks that run database integration tests.
 */

def dbIntegrationTestSourceDir = "$projectDir/src/dbIntegrationTest/java"
def dbIntegrationTestResourceDir = "$projectDir/src/dbIntegrationTest/resources"

sourceSets {
    dbIntegrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file(dbIntegrationTestSourceDir)
        }

        resources {
            srcDirs dbIntegrationTestResourceDir
        }
    }
}

configurations {
    dbIntegrationTestCompile.extendsFrom testCompile
    dbIntegrationTestRuntime.extendsFrom testRuntime
}

/**
 * Runs all database integration tests.
 */
task dbIntegrationTest(type: Test) {

    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = "Runs all database integration tests"

    dependsOn 'startPostgresInstance', 'copyDbIntegrationTestResources'
    finalizedBy 'stopPostgresInstance'

    testClassesDirs = sourceSets.dbIntegrationTest.output.classesDirs
    classpath = sourceSets.dbIntegrationTest.runtimeClasspath

    outputs.upToDateWhen { false }

    mustRunAfter test
}

/**
 * Prepares the machine for running database integration tests from Intellij
 */
task dbIntegrationTestInteractive(type: Exec) {

    commandLine 'docker', 'run', '--rm', '--name', 'dbIntegrationTestPostgresContainer', '-e', 'POSTGRESS_PASSWORD=dbIntegrationTest', '-e', 'POSTGRES_USER=tiolktrack', '-p', '5432:5432', 'postgres'
    dependsOn 'copyDbIntegrationTestResources'
}

task startPostgresInstance(type: Exec) {

    commandLine 'docker', 'run', '--rm', '--name', 'dbIntegrationTestPostgresContainer', '-e', 'POSTGRESS_PASSWORD=dbIntegrationTest', '-e', 'POSTGRES_USER=tiolktrack', '-p', '5432:5432', '-d', 'postgres'
}

task stopPostgresInstance(type: Exec) {
    commandLine 'docker', 'stop', 'dbIntegrationTestPostgresContainer'
}

task copyDbIntegrationTestResources(type: Copy) {

    from("$projectDir/db") {
        include 'liquibase/'
    }
    into sourceSets.dbIntegrationTest.output.resourcesDir
}

check.dependsOn dbIntegrationTest

idea {
    module {
        testSourceDirs += file(dbIntegrationTestSourceDir)
        resourceDirs += sourceSets.dbIntegrationTest.output.resourcesDir
    }
}